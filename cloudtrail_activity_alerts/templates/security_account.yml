AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::LanguageExtensions'
Description: |
  Centralized Lambda and SNS alerting system for CloudTrail activity across AWS Organization. Deployed in the Audit account.

Parameters:
  OrgId:
    Type: String
    Description: AWS Organization ID (e.g., o-xxxxxxxxxx)

  LambdaFunctionName:
    Type: String
    Default: CentralCloudTrailAlertHandler

  SNSTopicName:
    Type: String
    Default: CloudTrailSecurityAlerts

  AccountIds:
    Type: CommaDelimitedList
    Description: List of account IDs to monitor

Resources:
  'Fn::ForEach::Accounts':
    - AccountId
    - !Ref AccountIds
    - CrossAccountExecFrom${AccountId}:
        Type: AWS::Lambda::Permission
        Properties:
          Action: lambda:InvokeFunction
          FunctionName: !Ref CloudTrailAlertLambda
          Principal: !Sub arn:aws:iam::${AccountId}:root
          SourceAccount: !Sub ${AccountId}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${LambdaFunctionName}-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLoggingAndSNSPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SNSTopicName

  CloudTrailAlertLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 10
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          from datetime import datetime
          import json
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          sns = boto3.client('sns')
          
          SINGLE_LINE_LENGTH = 80
          DOUBLE_LINE_LENGTH = 47
          
          HEADER_TEXT = 'Nueva alerta de CloudTrail\n'
          
          def lambda_handler(event, context):
              
              SNS_TOPIC_ARN = os.getenv('SNS_TOPIC_ARN')
          
              try:
                  # Extract the CloudTrail event detail
                  detail = event.get('detail', {})
          
                  # Extract relevant fields
                  event_name = detail.get('eventName')
                  event_source = detail.get('eventSource')
                  user_identity = detail.get('userIdentity', {})
                  account_id = detail.get('recipientAccountId') or user_identity.get('accountId')
                  user_type = user_identity.get('type')
                  user = user_identity.get('userName') or user_identity.get('principalId')
                  source_ip = detail.get('sourceIPAddress')
                  time = detail.get('eventTime')
                  region = detail.get('awsRegion')
                  request_params = detail.get('requestParameters')
                  resources = detail.get('resources', [])
                  
                  # Format email content
                  subject = f"Resonet CloudTrail Alert: {event_name} in {account_id}"
                  message = f"""
              üîî CloudTrail Alert Triggered
          
                  üìå Event: {event_name}
                  üìå Source: {event_source}
                  üìå Account ID: {account_id}
                  üìå Region: {region}
                  üë§ User Type: {user_type}
                  üë§ User: {user}
                  üåç Source IP: {source_ip}
                  üïí Time: {time}
          
                  üßæ Request Parameters:
                  {json.dumps(request_params, indent=2)}
          
                  üì¶ Resources:
                  {json.dumps(resources, indent=2)}
                  """

                  sns.publish(
                      TopicArn=SNS_TOPIC_ARN,
                      Subject=f"CloudTrail Alert: {event_name} in {account_id}",
                      Message=message
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Alert sent successfully!')
                  }
              
              except Exception as e:
                  print("Error:", str(e))
                  raise

      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function to use in EventBridge rules in member accounts
    Value: !GetAtt CloudTrailAlertLambda.Arn

  SNSTopicArn:
    Description: ARN of the SNS Topic used for alerts
    Value: !Ref SNSTopic
